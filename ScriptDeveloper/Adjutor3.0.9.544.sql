UPDATE  VERSAOSISTEMA 
SET VERSAOSISTEMA.SCRIPTADJUTOR = '3.0.9.544',
       VERSAOSISTEMA.DATA   = '05.05.2020',
	    VERSAO = '3.0.9.544'
 where VERSAOSISTEMA.CODIGO = 1;

commit work; 


---- MODELO DE PROCESSOS
--processos -> modl_processos
CREATE TABLE MODL_PROCESSOS (
    PRO_CODIGO INTEGER NOT NULL,
	EMP_CODIGO VARCHAR(3),
    PRO_DESCRICAO VARCHAR(100),
	SRV_CODIGO INTEGER
	
	);

ALTER TABLE MODL_PROCESSOS ADD CONSTRAINT PK_MODL_PROCESSOS PRIMARY KEY (PRO_CODIGO);
	
COMMENT ON COLUMN MODL_PROCESSOS.PRO_CODIGO IS 'CODIGO DE IDENTIFICADOR DO PROCESSO';
COMMENT ON COLUMN MODL_PROCESSOS.PRO_DESCRICAO IS 'DESCRICAO DA PRODUCAO';
COMMENT ON TABLE MODL_PROCESSOS IS 'MODELO DE PROCESSOS DE PRODUCAO';
COMMENT ON COLUMN MODL_PROCESSOS.EMP_CODIGO IS 'CHAVE REFERENCIA DA TABELA EMPRESA (EMP0000)';
COMMENT ON COLUMN MODL_PROCESSOS.SRV_CODIGO IS 'CHAVE DA REFERENCIA';

CREATE SEQUENCE GEN_MODL_PROCESSOS;
COMMENT ON SEQUENCE GEN_MODL_PROCESSOS IS 'GERADOR PROCESSOS.PRO_CODIGO';


SET TERM ^ ;
create trigger modl_processos_bi for MODL_PROCESSOS
active before insert position 0
as
begin
  if (new.pro_codigo is null) then
    new.pro_codigo = gen_id(GEN_MODL_PROCESSOS,1);
end^

SET TERM ; ^
ALTER TABLE PRD0000 DROP CONSTRAINT FK_PRD0000_PROCESSO;

-- PREENCHER O MODELO DO PROCESSO
-- ATENCAO ****** SO PODE SER RODADO UMA UNICA VEZ
INSERT INTO MODL_PROCESSOS (PRO_CODIGO, EMP_CODIGO, PRO_DESCRICAO, SRV_CODIGO)
SELECT PRO_CODIGO, EMP_CODIGO, PRO_DESCRICAO, SRV_CODIGO FROM PROCESSOS;

COMMIT WORK;

-- ATUALIZA O SEQUENCE /GENERATOR
SET TERM ^ ;
EXECUTE BLOCK
AS
declare variable x integer;
BEGIN
  SELECT MAX(PRO_CODIGO ) FROM MODL_PROCESSOS
  INTO X;
 execute statement 'set generator  GEN_MODL_PROCESSOS to ' || +CAST(X AS VARCHAR(5));
END ^

SET TERM ; ^

COMMIT WORK;

-- MODELO DE PROCESSOS_OPERACOES
CREATE TABLE MODl_PROCESSOS_OPERACOES (
    POP_CODIGO INTEGER NOT NULL,
    PRO_CODIGO INTEGER NOT NULL,
    OPE_CODIGO INTEGER NOT NULL,
	POP_TEMPOESTIMADO TIME,
	POP_SEQ INTEGER);

-- PREENCHER O MODELO DO PROCESSOS_OPERACOES
-- ATENCAO ****** SO PODE SER RODADO UMA UNICA VEZ
INSERT INTO MODl_PROCESSOS_OPERACOES (POP_CODIGO, PRO_CODIGO, OPE_CODIGO, POP_TEMPOESTIMADO, POP_SEQ)
SELECT POP_CODIGO, PRO_CODIGO, OPE_CODIGO, POP_TEMPOESTIMADO, POP_SEQ
FROM PROCESSOS_OPERACOES;

COMMIT WORK;	
	
ALTER TABLE MODl_PROCESSOS_OPERACOES ADD CONSTRAINT PK_MODL_PROCESSOS_OPERACOES  PRIMARY KEY (POP_CODIGO);
ALTER TABLE MODl_PROCESSOS_OPERACOES ADD CONSTRAINT FK_MODL_PROCESSOS FOREIGN KEY (PRO_CODIGO) REFERENCES MODL_PROCESSOS(PRO_CODIGO);
ALTER TABLE MODl_PROCESSOS_OPERACOES ADD CONSTRAINT FK_MODL_PROCESSOS_OPERACOES FOREIGN KEY (OPE_CODIGO) REFERENCES OPERACOES(OPE_CODIGO);

COMMENT ON COLUMN MODl_PROCESSOS_OPERACOES.POP_CODIGO IS 'IDENTIFICADOR DO PROCESSOS OPERACOES';
COMMENT ON COLUMN MODl_PROCESSOS_OPERACOES.PRO_CODIGO IS 'IDENTIFICADOR DO PROCESSO';
COMMENT ON TABLE MODl_PROCESSOS_OPERACOES IS 'MODELO DO PROCESSO DE PRODUCAO';
COMMENT ON COLUMN MODl_PROCESSOS_OPERACOES.OPE_CODIGO IS 'REFERENCIA DE OPERACOES';
COMMENT ON COLUMN MODl_PROCESSOS_OPERACOES.POP_SEQ IS 'SEQUENCIA DO PROCESSO INDUSTRIALIZACAO';
COMMENT ON COLUMN MODl_PROCESSOS_OPERACOES.POP_TEMPOESTIMADO IS 'TEMPO ESTIMADO DA OPERACAO';



CREATE SEQUENCE GEN_MODL_PROCESSOS_OPERACOES_ID;

COMMENT ON SEQUENCE GEN_MODL_PROCESSOS_OPERACOES_ID IS 'GERADOR SEQ EM MODELO MODELO PROCESSOS_OPERACOES.POP_CODIGO';

-- ATUALIZAR SEQUENCE NOVO 
SET TERM ^ ;
EXECUTE BLOCK
AS
declare variable x integer;
BEGIN
  SELECT MAX(POP_CODIGO ) FROM MODl_PROCESSOS_OPERACOES
  INTO X;
 execute statement 'set generator  GEN_MODL_PROCESSOS_OPERACOES_ID to ' || +CAST(X AS VARCHAR(5));
END ^

SET TERM ; ^

COMMIT WORK;


SET TERM ^ ;

create or  ALTER  trigger MODl_PROCESSOS_OPERACOES_BI for MODl_PROCESSOS_OPERACOES
active before insert position 0
as
begin
  if (new.pop_codigo is null) then
    new.pop_codigo = gen_id(GEN_MODL_PROCESSOS_OPERACOES_ID,1);
end^

SET TERM ; ^


ALTER TABLE PRD0000 ADD CONSTRAINT FK_PRD0000_modl_processos
FOREIGN KEY (PRO_CODIGO) REFERENCES MODL_PROCESSOS(PRO_CODIGO)
ON DELETE SET NULL ON UPDATE CASCADE;	

-- ATUALIZANDO O ITEM DE PRODUCAO 
ALTER TABLE ITEM_ORDEMPRODUCAO ADD PRO_CODIGO INT;
COMMENT ON COLUMN ITEM_ORDEMPRODUCAO.PRO_CODIGO IS 'LINHA DE PRODUCAO QUE FOI FEITA MODL_PROCESSO';
 
UPDATE ITEM_ORDEMPRODUCAO IT
SET PRO_CODIGO = (SELECT PRO_CODIGO FROM PRD0000 PR WHERE PR.PRD_CODIGO = IT.PRD_CODIGO);

ALTER TABLE QUALIDADE_PRODUCAO DROP CONSTRAINT FK_QUALIDADE_PRO_PARAMETROS;

-- MODELO ESPECIFICACOES DE CADA OPERACAO
CREATE TABLE MODL_ESPECIFICACOES_OPERACAO (
    EOP_CODIGO INTEGER NOT NULL,
    EOP_SEQ INTEGER NOT NULL,
    OPE_CODIGO INTEGER NOT NULL,
    EOP_NOME VARCHAR(30), 
	EOP_DESCRICAO VARCHAR(100)
	);

	
-- PREENCHER O MODELO
-- ATENCAO ****** SO PODE SER RODADO UMA UNICA VEZ	
INSERT INTO MODL_ESPECIFICACOES_OPERACAO (EOP_CODIGO, EOP_SEQ, OPE_CODIGO, EOP_NOME, EOP_DESCRICAO)	
SELECT EOP_CODIGO, EOP_SEQ, OPE_CODIGO, EOP_NOME, EOP_DESCRICAO
FROM ESPECIFICACOES_OPERACAO;

commit work;

-- CRIAR NOVA SEQUENCE
CREATE SEQUENCE GEN_MOD_ESPECIFICACOES_OPERACAO;
comment on sequence GEN_MOD_ESPECIFICACOES_OPERACAO is 'GERADOR ESPECIFICACOES_OPERACAO';


-- ATUALIZAR O SEQUENCE 
-- atualizando  a chave do MODELO ESPECIFICACOES 
SET TERM ^ ;
execute block as
  declare variable x integer;
begin
  SELECT max(eop_CODIGO) from MODL_ESPECIFICACOES_OPERACAO into x;
  execute statement 'set generator GEN_MOD_ESPECIFICACOES_OPERACAO to ' || CAST( x AS VARCHAR(5));
end^
SET TERM ; ^

commit work;    

set generator gen_especificacoes_operacao TO 0 ;

COMMIT WORK;

ALTER TABLE ESPECIFICACOES_OPERACAO ADD EOP_CODIGO_MODELO INTEGER; -- CAMPO TEMPORARIO ;

-- AGORA VAI O PROCESSO SE REFERE AS ESPECIFICACOES POP_CODIGO REFERENCIA DE PROCESSO-OPERACAO
ALTER TABLE ESPECIFICACOES_OPERACAO ADD POP_CODIGO INTEGER;

DELETE FROM ESPECIFICACOES_OPERACAO;

COMMIT WORK;

--REPREENCHER O ESPECIFICACOES_OPERACAO AGORA COM OS PRO_CODIGO , SE AS ESPECIFICACOES FORAM MUDADAS SERA PERDIDA
-- ATENCAO ****** SO PODE SER RODADO UMA UNICA VEZ
INSERT INTO ESPECIFICACOES_OPERACAO ( EOP_SEQ, OPE_CODIGO, EOP_NOME, EOP_DESCRICAO, POP_CODIGO, EOP_CODIGO_MODELO)
SELECT  eop.EOP_SEQ, EOP.OPE_CODIGO, EOP_NOME, EOP_DESCRICAO, POP_CODIGO, EOP.EOP_CODIGO
FROM MODL_ESPECIFICACOES_OPERACAO eop 
JOIN OPERACOES op ON (op.OPE_CODIGO = eop.OPE_CODIGO)
JOIN MODL_PROCESSOS_OPERACOES pop ON (pop.OPE_CODIGO = op.OPE_CODIGO)
order BY POP_CODIGO, OPE_CODIGO, EOP_SEQ ;

COMMIT WORK; 

SET TERM ^ ;

execute block as
  declare variable x integer;
begin
  SELECT max(eop_CODIGO) from ESPECIFICACOES_OPERACAO into x;
  execute statement 'set generator GEN_ESPECIFICACOES_OPERACAO to ' || CAST( x AS VARCHAR(5));
end^
SET TERM ; ^

commit work;    
	
ALTER TABLE MODL_ESPECIFICACOES_OPERACAO ADD CONSTRAINT PK_MODL_ESPECIFICACOES_OPERACAO PRIMARY KEY (EOP_CODIGO)	;

ALTER TABLE MODL_ESPECIFICACOES_OPERACAO ADD CONSTRAINT FK_MODLESPECIFICACOES_OPERACAO FOREIGN KEY (OPE_CODIGO) REFERENCES OPERACOES(OPE_CODIGO)
ON DELETE CASCADE ON UPDATE CASCADE;
	
COMMENT ON COLUMN MODL_ESPECIFICACOES_OPERACAO.EOP_CODIGO IS 'IDENTIFICADOR DE ESPECIFICACOES DA OPERACAO';
COMMENT ON COLUMN MODL_ESPECIFICACOES_OPERACAO.EOP_SEQ IS 'SEQUENCIA';
COMMENT ON COLUMN MODL_ESPECIFICACOES_OPERACAO.OPE_CODIGO IS 'REFERENCIA DE OPERACOES';
COMMENT ON COLUMN MODL_ESPECIFICACOES_OPERACAO.EOP_NOME IS 'NOME DA ESPECIFICACAO/NOME DA COLUNA(HEADER)';
COMMENT ON COLUMN MODL_ESPECIFICACOES_OPERACAO.EOP_DESCRICAO IS 'DESCRICAO DA ESPECIFICACAO';
COMMENT ON TABLE MODL_ESPECIFICACOES_OPERACAO IS 'PARAMETROS DE QUALIDADE/ESPECIFICACOES PARA CADA OPERACAO ';

SET TERM ^ ;

create trigger mod_especificacoes_operacao_bi for MODL_ESPECIFICACOES_OPERACAO
active before insert position 0
as
begin
  if (new.eop_codigo is null) then
    new.eop_codigo = gen_id(GEN_MOD_ESPECIFICACOES_OPERACAO,1);
end
^

SET TERM ; ^

-- MODELO DE VALORES FIXOS DE ESPECIFICACOES DE QUALIDADE DE PRODUCAO
CREATE TABLE MODL_QUALIDADE_PRODUCAO (
    QPR_CODIGO INTEGER NOT NULL,
    QPR_SEQUENCIA INTEGER,
    EOP_CODIGO INTEGER NOT NULL,
    PRO_CODIGO INTEGER NOT NULL,
	POP_CODIGO INTEGER NOT NULL,
    QPR_VALOR VARCHAR(100) NOT NULL) ;

-- PREENCHER OS MODELOS 	
INSERT INTO MODL_QUALIDADE_PRODUCAO (QPR_CODIGO, QPR_SEQUENCIA, EOP_CODIGO, PRO_CODIGO, POP_CODIGO, QPR_VALOR)
SELECT QPR_CODIGO, QPR_SEQUENCIA, EOP_CODIGO, PRO_CODIGO, POP_CODIGO, QPR_VALOR
FROM QUALIDADE_PRODUCAO;

COMMIT WORK;
	
ALTER TABLE MODL_QUALIDADE_PRODUCAO  ADD CONSTRAINT PK_MODLQUALIDADE_PRODUCAO PRIMARY KEY (QPR_CODIGO);
COMMENT ON TABLE MODL_QUALIDADE_PRODUCAO IS 'MODELO DE VALORES FIXOS DE ESPECIFICACOES DE QUALIDADE DE PRODUCAO';	
COMMENT ON COLUMN MODL_QUALIDADE_PRODUCAO.QPR_CODIGO IS 'IDENTIFICADO DO VALOR DA ESPECIFICACOES';
COMMENT ON COLUMN MODL_QUALIDADE_PRODUCAO.QPR_SEQUENCIA IS 'REGISTRO UMA ESPECIFICACOES PODE TER VARIOS REGISTROS';
COMMENT ON COLUMN MODL_QUALIDADE_PRODUCAO.EOP_CODIGO IS 'CHAVE IDENTIFICADOR DA ESPECIFICACOES (ESPECIFICACOES_OPERACAO)';
COMMENT ON COLUMN MODL_QUALIDADE_PRODUCAO.PRO_CODIGO IS 'CHAVE IDENTIFICADOR DO PROCESSO-REDUDANTE';
COMMENT ON COLUMN MODL_QUALIDADE_PRODUCAO.POP_CODIGO IS 'CHAVE IDENTIFICADOR DO PROCESSO-OPERACAO (PROCESSOS_OPERACOES)';
COMMENT ON COLUMN MODL_QUALIDADE_PRODUCAO.QPR_VALOR IS 'RESULTADO DA QUALIDADE DE PRODUCAO';

CREATE SEQUENCE GEN_MODLQUALIDADE_PRODUCAO_ID;
COMMENT ON SEQUENCE GEN_QUALIDADE_PRODUCAO_ID IS 'GERADOR DE RESULTADO DA QUALIDADE DE PRODUCAO';

-- atualizando  a chave do VALORES FIXOS ESPECIFICACOES
SET TERM ^ ;

execute block as
  declare variable x integer;
begin
  SELECT max(QPR_CODIGO) from MODL_QUALIDADE_PRODUCAO into x;
  if (:X>0) then
    execute statement 'set generator GEN_MODLQUALIDADE_PRODUCAO_ID to ' || CAST( x AS VARCHAR(5));
end^
SET TERM ; ^

commit work;  

set generator GEN_QUALIDADE_PRODUCAO_ID to 0;
commit work;

delete from QUALIDADE_PRODUCAO;

commit work;

INSERT INTO QUALIDADE_PRODUCAO ( QPR_SEQUENCIA, EOP_CODIGO, PRO_CODIGO, POP_CODIGO, QPR_VALOR)
SELECT  qp.QPR_SEQUENCIA, eop2.EOP_CODIGO, qp.PRO_CODIGO, eop2.POP_CODIGO, qp.QPR_VALOR 
FROM MODL_ESPECIFICACOES_OPERACAO eop 
JOIN ESPECIFICACOES_OPERACAO eop2 ON (eop2.EOP_CODIGO_MODELO = eop.EOP_CODIGO)
JOIN PROCESSOS_OPERACOES pop ON (pop.POP_CODIGO = eop2.POP_CODIGO)
JOIN MODL_QUALIDADE_PRODUCAO qp ON (eop.EOP_CODIGO = qp.EOP_CODIGO AND qp.pro_CODIGO = pop.pro_CODIGO)
ORDER BY eop2.POP_CODIGO, eop2.EOP_CODIGO, QPR_SEQUENCIA;

commit work;

SET TERM ^ ;

execute block as
  declare variable x integer;
begin
  SELECT max(QPR_CODIGO) from QUALIDADE_PRODUCAO into x;
  if (:X>0) then
    execute statement 'set generator gen_qualidade_producao_id to ' || x;
end^
SET TERM ; ^


commit work;

SET TERM ^ ;

create OR ALTER trigger MODLqualidade_producao_bi for MODL_QUALIDADE_PRODUCAO
active before insert position 0
as
begin
  if (new.qpr_codigo is null) then
    new.qpr_codigo = gen_id(GEN_MODLQUALIDADE_PRODUCAO_ID,1);
end^

SET TERM ; ^

ALTER TABLE MODL_QUALIDADE_PRODUCAO  ADD CONSTRAINT FK_MODQUALIDADE_PRO_PARAMETROS
FOREIGN KEY (EOP_CODIGO) REFERENCES MODL_ESPECIFICACOES_OPERACAO (EOP_CODIGO)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE RESULTADO_ESPECIFICACOES DROP CONSTRAINT FK_RESULTADO_ESPECIFICACOES_1;
ALTER TABLE RESULTADO_ESPECIFICACOES DROP CONSTRAINT FK_RESULTADO_ESPECIFICACOES_2;

-- MODELO DE RESULTADO INSPECAO ETC
CREATE TABLE MODLESPE_OPERACAO_RESUL (
    EOR_CODIGO INTEGER NOT NULL,
    OPE_CODIGO INTEGER NOT NULL,    
    EOR_SEQ INTEGER,
    EOR_NOME VARCHAR(100));
   
ALTER TABLE MODLESPE_OPERACAO_RESUL
ADD CONSTRAINT PK_MDLESPE_OPERACAO_RESUL
PRIMARY KEY (EOR_CODIGO);

-- identifica qual o processo operacao porque agora ele copia o modelo 
ALTER TABLE ESPE_OPERACAO_RESUL ADD POP_CODIGO INTEGER;
ALTER TABLE ESPE_OPERACAO_RESUL ADD EOR_CODIGO_ANTIGO INTEGER;

comment ON table MODLESPE_OPERACAO_RESUL IS 'MODELO DE RESULTADO DE PRODUCAO';
COMMENT ON COLUMN MODLESPE_OPERACAO_RESUL.EOR_CODIGO IS 'IDENTIFICADOR';
COMMENT ON COLUMN MODLESPE_OPERACAO_RESUL.OPE_CODIGO IS 'REFERENCIA DA OPERACAO';
COMMENT ON COLUMN MODLESPE_OPERACAO_RESUL.EOR_SEQ IS 'SEQUENCIA';
COMMENT ON COLUMN MODLESPE_OPERACAO_RESUL.EOR_NOME IS 'NOME DO RESULTADO';

CREATE SEQUENCE GEN_MODLESPE_OPERACAO_RESUL;

-- COPIA PARA MODELO 
-- ATENCAO ****** SO PODE SER RODADO UMA UNICA VEZ
INSERT INTO MODLESPE_OPERACAO_RESUL (EOR_CODIGO, OPE_CODIGO, EOR_SEQ, EOR_NOME)
SELECT EOR_CODIGO, OPE_CODIGO, EOR_SEQ, EOR_NOME
FROM ESPE_OPERACAO_RESUL;

commit work;

-- atualizando  a SEQUENCE
SET TERM ^ ;
execute block as

  declare variable x integer;
begin
  SELECT max(EOR_CODIGO) from MODLESPE_OPERACAO_RESUL into x;
   If (:X>0) then
    execute statement 'set generator GEN_MODLESPE_OPERACAO_RESUL to ' || CAST( x AS VARCHAR(5));
end^
SET TERM ; ^

commit work;  

DELETE FROM ESPE_OPERACAO_RESUL;

COMMIT WORK;

-- produto do carteziano do MODLESPE_OPERACAO_RESUL com processo_operacoes para guardar os valores antigo , 
-- se ainda não foi mudado não houve perda
-- ATENCAO ****** SO PODE SER RODADO UMA UNICA VEZ
INSERT INTO ESPE_OPERACAO_RESUL ( OPE_CODIGO, EOR_SEQ, EOR_NOME, pop_codigo, EOR_CODIGO_ANTIGO)
SELECT epr.OPE_CODIGO,EOR_SEQ, EOR_NOME, POP.POP_CODIGO , EOR_CODIGO
FROM PROCESSOS_OPERACOES POP
JOIN MODLESPE_OPERACAO_RESUL epr ON (epr.OPE_CODIGO = pop.OPE_CODIGO);

commit work;

UPDATE  RESULTADO_ESPECIFICACOES RE
SET EOR_CODIGO = (SELECT FIRST 1 EOR_CODIGO FROM ESPE_OPERACAO_RESUL EOR WHERE EOR.EOR_CODIGO_ANTIGO = RE.EOR_CODIGO);

COMMIT WORK;

SET TERM ^ ;
execute block as
  declare variable x integer;
begin
  SELECT max(EOR_CODIGO) from ESPE_OPERACAO_RESUL into x;
  if (:X>0) then
   execute statement 'set generator GEN_ESPE_OPERACAO_RESUL to ' || CAST( x AS VARCHAR(5));
end^
SET TERM ; ^

commit work;

SET TERM ^ ;

create trigger modelespe_operacao_resul_bi for MODLESPE_OPERACAO_RESUL
active before insert position 0
as
begin
  if (new.eor_codigo is null) then
    new.eor_codigo = gen_id(GEN_MODLESPE_OPERACAO_RESUL,1);
end^

SET TERM ; ^



ALTER TABLE MODLESPE_OPERACAO_RESUL
ADD CONSTRAINT FK_MODLESPECIFICARESULOPERACAO
FOREIGN KEY (OPE_CODIGO)
REFERENCES OPERACOES(OPE_CODIGO)
ON DELETE CASCADE
ON UPDATE CASCADE;

ALTER TABLE ESPECIFICACOES_OPERACAO DROP EOP_CODIGO_MODELO;
ALTER TABLE ESPE_OPERACAO_RESUL DROP EOR_CODIGO_ANTIGO ;




ALTER TABLE QUALIDADE_PRODUCAO ADD CONSTRAINT FK_QUALIDADE_PRO_PARAMETROS FOREIGN KEY (EOP_CODIGO) REFERENCES ESPECIFICACOES_OPERACAO (EOP_CODIGO) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE RESULTADO_ESPECIFICACOES ADD CONSTRAINT FK_RESULTADO_ESPECIFICACOES_1 FOREIGN KEY (IOP_CODIGO) REFERENCES ITEM_ORDEMPRODUCAO (IOP_CODIGO) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE RESULTADO_ESPECIFICACOES ADD CONSTRAINT FK_RESULTADO_ESPECIFICACOES_2 FOREIGN KEY (EOR_CODIGO) REFERENCES ESPE_OPERACAO_RESUL (EOR_CODIGO) ON DELETE CASCADE ON UPDATE CASCADE;




ALTER TABLE ITEM_ORDEMPRODUCAO
ADD CONSTRAINT FK_ITEM_ORDEMPRODUCAO_PROCESSO
FOREIGN KEY (PRO_CODIGO)
REFERENCES PROCESSOS(PRO_CODIGO)
ON DELETE SET NULL
ON UPDATE SET NULL
USING INDEX FK_ITEM_ORDEMPRODUCAO_PROCESSO;

ALTER TABLE PROCESSOS_PRODUCAO
ADD CONSTRAINT PK_PROCESSOS_PRODUCAO
PRIMARY KEY (PCP_CODIGO);


CREATE TABLE TABELA_RESULTADO (
    TAB_CODIGO      INTEGER NOT NULL ,
    PCP_CODIGO      INTEGER NOT NULL,
    TAB_DISTANCIA1  VARCHAR(10),
    TAB_DUREZA1     VARCHAR(10),
    TAB_EHT1        VARCHAR(10),
    TAB_DISTANCIA2  VARCHAR(10),
    TAB_DUREZA2     VARCHAR(10),
    TAB_EHT2        VARCHAR(10),
    TAB_DISTANCIA3  VARCHAR(10),
    TAB_DUREZA3     VARCHAR(10),
    TAB_EHT3        VARCHAR(10),
    TAB_DISTANCIA4  VARCHAR(10),
    TAB_DUREZA4     VARCHAR(10),
    TAB_EHT4        VARCHAR(10)
);


CREATE SEQUENCE GEN_TABELA_RESULTADO;
 
ALTER TABLE TABELA_RESULTADO ADD CONSTRAINT PK_TABELA_RESULTADO PRIMARY KEY (TAB_CODIGO);

COMMENT ON TABLE TABELA_RESULTADO IS'RESULTADO ENCONTRADO NA OPERACAO DE INPSECAO METALOGRAFICA';
COMMENT ON COLUMN TABELA_RESULTADO.PCP_CODIGO IS'RELACIONAMENTO COM PROCESSOS_PRODUCAO';
