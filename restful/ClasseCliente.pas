unit ClasseCliente;

{*******************************************************************************
    Generated By   : JsonToDelphiClass - 0.65 (http://jsontodelphi.com)
    Projeto        : Mercos
    Gerado         : 2019-07-10 16:41:40
  	Classe         :  Clientes https://sandbox.mercos.com/api/v1/clientes
	                    Rede https://sandbox.mercos.com/api/v1/redes
					            Segmentos https://sandbox.mercos.com/api/v1/segmentos
    Criado por     :  Jairo Monassa
    
*******************************************************************************}

interface

uses Generics.Collections, Rest.Json;

type

TTelefonesClass = class
private
  FNumero: String;
public
  property numero: String read FNumero write FNumero;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TTelefonesClass;
end;

TEmailsClass = class
private
  FEmail: String;
public
  property email: String read FEmail write FEmail;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TEmailsClass;
end;

TEnderecos_adicionaisClass = class
private
  FBairro: String;
  FCep: String;
  FCidade: String;
  FComplemento: String;
  FEndereco: String;
  FEstado: String;
  FNumero: String;
public
  property bairro: String read FBairro write FBairro;
  property cep: String read FCep write FCep;
  property cidade: String read FCidade write FCidade;
  property complemento: String read FComplemento write FComplemento;
  property endereco: String read FEndereco write FEndereco;
  property estado: String read FEstado write FEstado;
  property numero: String read FNumero write FNumero;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TEnderecos_adicionaisClass;
end;


TContatosClass = class
private
  FCargo: String;
  FEmails: TArray<TEmailsClass>;
  FNome: String;
  FTelefones: TArray<TTelefonesClass>;
public
  property cargo: String read FCargo write FCargo;
  property emails: TArray<TEmailsClass> read FEmails write FEmails;
  property nome: String read FNome write FNome;
  property telefones: TArray<TTelefonesClass> read FTelefones write FTelefones;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TContatosClass;
end;



TCliente = class
private
  FId: integer;
  FBairro: String;
  FBloqueado_b2b: Boolean;
  FCep: string;
  FCidade: String;
  FCnpj: String;
  FComplemento: String;
  FContatos: TArray<TContatosClass>;
  FEmails: TArray<TEmailsClass>;
  FEnderecos_adicionais: TArray<TEnderecos_adicionaisClass>;
  FEstado: String;
  FExcluido: Boolean;
  FInscricao_estadual: String;
  FNome_excecao_fiscal: String;
  FNome_fantasia: String;
  FNumero: String;
  FObservacao: String;
  FRazao_social: String;
  FRua: String;
//  FSegmento_id: Extended;
  FSuframa: String;
  FTelefones: TArray<TTelefonesClass>;
  FTipo: String;
  FUltima_alteracao: string;
public
  property id : integer read Fid write Fid;
  property bairro: String read FBairro write FBairro;
  property bloqueado_b2b: boolean read FBloqueado_b2b write FBloqueado_b2b;
  property cep: string read FCep write FCep;
  property cidade: String read FCidade write FCidade;
  property cnpj: String read FCnpj write FCnpj;
  property complemento: String read FComplemento write FComplemento;
  property contatos: TArray<TContatosClass> read FContatos write FContatos;
  property emails: TArray<TEmailsClass> read FEmails write FEmails;
  property enderecos_adicionais: TArray<TEnderecos_adicionaisClass> read FEnderecos_adicionais write FEnderecos_adicionais;
  property estado: String read FEstado write FEstado;
  property excluido: Boolean read FExcluido write FExcluido;
  property inscricao_estadual: String read FInscricao_estadual write FInscricao_estadual;
  property nome_excecao_fiscal: String read FNome_excecao_fiscal write FNome_excecao_fiscal;
  property nome_fantasia: String read FNome_fantasia write FNome_fantasia;
  property numero: String read FNumero write FNumero;
  property observacao: String read FObservacao write FObservacao;
  property razao_social: String read FRazao_social write FRazao_social;
  property rua: String read FRua write FRua;
 // property segmento_id: Extended read FSegmento_id write FSegmento_id;
  property suframa: String read FSuframa write FSuframa;
  property telefones: TArray<TTelefonesClass> read FTelefones write FTelefones;
  property tipo: String read FTipo write FTipo;
  property ultima_alteracao: String read FUltima_alteracao write FUltima_alteracao;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TCliente;
end;
TRedeCliente = class
private
  FExcluido: Boolean;
  FNome: String;
public
  property excluido: Boolean read FExcluido write FExcluido;
  property nome: String read FNome write FNome;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TRedeCliente;
end;

TSegmento = class
private
  FExcluido: Boolean;
  FNome: String;
public
  property excluido: Boolean read FExcluido write FExcluido;
  property nome: String read FNome write FNome;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TSegmento;
end;

TErrosClass = class
private
  FCampo: String;
  FMensagem: String;
public
  property campo: String read FCampo write FCampo;
  property mensagem: String read FMensagem write FMensagem;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TErrosClass;
end;

TListaErros = class
private
  FErros: TArray<TErrosClass>;
  FMensagem: String;
public
  property erros: TArray<TErrosClass> read FErros write FErros;
  property mensagem: String read FMensagem write FMensagem;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TListaErros;
end;

implementation

{TEnderecos_adicionaisClass}


function TEnderecos_adicionaisClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TEnderecos_adicionaisClass.FromJsonString(AJsonString: string): TEnderecos_adicionaisClass;
begin
  result := TJson.JsonToObject<TEnderecos_adicionaisClass>(AJsonString)
end;

{TContatosClass}

destructor TContatosClass.Destroy;
var
  LemailsItem: TEmailsClass;
  LtelefonesItem: TTelefonesClass;
begin

 for LemailsItem in FEmails do
   LemailsItem.Free;
 for LtelefonesItem in FTelefones do
   LtelefonesItem.Free;

  inherited;
end;

function TContatosClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TContatosClass.FromJsonString(AJsonString: string): TContatosClass;
begin
  result := TJson.JsonToObject<TContatosClass>(AJsonString)
end;

{TTelefonesClass}


function TTelefonesClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TTelefonesClass.FromJsonString(AJsonString: string): TTelefonesClass;
begin
  result := TJson.JsonToObject<TTelefonesClass>(AJsonString)
end;

{TEmailsClass}


function TEmailsClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TEmailsClass.FromJsonString(AJsonString: string): TEmailsClass;
begin
  result := TJson.JsonToObject<TEmailsClass>(AJsonString)
end;

{TCliente}

destructor TCliente.Destroy;
var
  LemailsItem: TEmailsClass;
  LtelefonesItem: TTelefonesClass;
  LcontatosItem: TContatosClass;
  Lenderecos_adicionaisItem: TEnderecos_adicionaisClass;
begin

 for LemailsItem in FEmails do
   LemailsItem.Free;
 for LtelefonesItem in FTelefones do
   LtelefonesItem.Free;
 for LcontatosItem in FContatos do
   LcontatosItem.Free;
 for Lenderecos_adicionaisItem in FEnderecos_adicionais do
   Lenderecos_adicionaisItem.Free;

  inherited;
end;

function TCliente.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TCliente.FromJsonString(AJsonString: string): TCliente;
begin
  result := TJson.JsonToObject<TCliente>(AJsonString)
end;

{TRedeCliente}

function TRedeCliente.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TRedeCliente.FromJsonString(AJsonString: string): TRedeCliente;
begin
  result := TJson.JsonToObject<TRedeCliente>(AJsonString)
end;
{TSegmento }

function TSegmento.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TSegmento.FromJsonString(AJsonString: string): TSegmento;
begin
  result := TJson.JsonToObject<TSegmento>(AJsonString)
end;

{TErrosClass}


function TErrosClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TErrosClass.FromJsonString(AJsonString: string): TErrosClass;
begin
  result := TJson.JsonToObject<TErrosClass>(AJsonString)
end;

{TListaErros}

destructor TListaErros.Destroy;
var
  LerrosItem: TErrosClass;
begin

 for LerrosItem in FErros do
   LerrosItem.Free;

  inherited;
end;

function TListaErros.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TListaErros.FromJsonString(AJsonString: string): TListaErros;
begin
  result := TJson.JsonToObject<TListaErros>(AJsonString)
end;


end.
